'''
Created on Sep 3, 2017

@author: DougBrownWin
create a framework to visualize a continous confidence area generated by the UAVs
'''

import Variables as varis
from SRC_confidenceArea.ConfArea_Matrix import ConfArea_Matrix
from SRC_confidenceArea.ViewLive import ViewLive
from UavPso import UavPso
from RecordData import RecordData


class ConfArea(object):
    '''
    classdocs
    '''


    def __init__(self):
        '''
        Constructor
        '''
        
        self.confArea = ConfArea_Matrix()
        self.viewLive = ViewLive()
        
                
        
    # this controls which uav object to return
    def getUav(self, indx):
        uav = UavPso(varis.params,indx)
        
        # add uav to params
        varis.params.addUav(uav)
        
        return(uav)   
            
    
    
    # begin simualtion test
    def begin(self):
        
        # create uavs
        uavs = []
        for indx in range(0,varis.params.uav_num):
            uav = self.getUav(indx)
            uavs.insert(indx, uav)
        
        # data/pic/video recorder
        # record position, confArea size, time, 
        # also save pic/video files
        recorder = RecordData() 
        
        
        print("Running confidence area simulation")
        
        # basically just keeptrack of percent to manage printing
        percent_counter = 1

        # loop for amount of time
        while(varis.params.current_time < varis.time_limit):
            percent = 100 * varis.params.current_time / varis.params.time_limit
            if(percent > percent_counter):
                percent_counter += 1
                print('%% %f' % (percent))
            
            # update positions for uavs        
            for indx in range(0,varis.params.uav_num):
                uav = uavs[indx]
                uav.moveStep()
                
            # update confidence area
            # update map based on UAV position
            # if UaV covers 50% or more, make 1
            # initialy all zeros
            # update other squares when target could have traveld 1 full square lengthwise
            self.confArea.update_area(uavs)
             
            # update time
            varis.params.timeStep()
            
            # realTime view of stuff
            if (varis.view_liveBool == True):
                self.viewLive.plotLive(self.confArea, uavs)
            
             
            # record stuff
            recorder.rec_confArea(self.confArea)
        
        # print and save simulation data...
        print(recorder.toString())
        recorder.save_txt()



# RUN Z PROGRAM HANZ!!
if __name__ == '__main__':
    pass

    # initialize and run simulation
    confArea = ConfArea()
    confArea.begin()
    